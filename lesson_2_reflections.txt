Q:	What happens when you initialize a repository? Why do you need to do it?

A:  When we initialize a repository, git creates a .git metadata file that 
	stores all of the commit history information. We need to inizialize so
	that git knows where the files will be locatied to track.

Q:	How is the staging area different from the working directory and the repository?
	What value do you think it offers?

A:	The staging area offers a separate "temporary directory" where files are kept
	with the intention of commiting them.
	It offers more flexibility into choosing what files the user wants to commit
	when there are many other files to consider in a project.

Q:	How can you use the staging area to make sure yo have one commit per logical change?

A:	The staging area can be used to check between the working directory and the 
	commit log repository (recent commit) and search for changes done.

Q:	What are some situations when branches would be helpful in keeping your history
	organized? How would branches help?

A:	Some situations may include times where an application can have multiple
	versions. The branches feature in Git can help by changing the linear
	progression of commits into multiple "branches".

Q:	How do the diagrams help you visualize the branch structure?

A:	It helps by showing the log for each log per branch in separate columns.

Q:	What is the result of merging two branches together? Why do we represent it
	in the way we do?

A:	After merging two or more branches, features/UI/changes, included in separate 
	branches are merged together. To help maintain a mental picture as to
	how the files are merged.

Q:	What are the pros and cons of Git's automatic merging vs. always doing merges
	manually?

A:	Automatic merging can save time by logically keeping and removing lines that
	are necessary or unwanted. It can, however, create unwanted bugs in the code
	since it wont know the different for some unwanted code that have been removed
	by one user and added by another user.